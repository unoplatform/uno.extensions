<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:xamarin="http://nventive.com/xamarin"
                    xmlns:android="http://nventive.com/android"
                    xmlns:ios="http://nventive.com/ios"
                    xmlns:u="using:Nventive.View.Controls"
                    xmlns:ue="using:Nventive.View.Extensions"
                    xmlns:toolkit="using:Uno.UI.Toolkit"
                    mc:Ignorable="xamarin android ios">

    <!-- 
        IMPORTANT DOCUMENTATION
        https://github.com/unoplatform/uno/blob/master/doc/articles/controls/CommandBar.md
    -->

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Application/Colors.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="DefaultCommandBarStyle"
           TargetType="CommandBar"
           xamarin:BasedOn="{StaticResource NativeDefaultCommandBar}">
        <!-- COMMON SETTERS -->
        <Setter Property="toolkit:CommandBarExtensions.BackButtonForeground"
                Value="{StaticResource CommandBarForegroundBrush}" />
        <Setter Property="Background"
                Value="{StaticResource CommandBarBackgroundBrush}" />
        <Setter Property="Foreground"
                Value="{StaticResource CommandBarForegroundBrush}" />

        <!-- StatusBarThickness Padding set here in order to fix those two known issues:
                On iOS the content will be underneath the CommandBar
                On Android the CommandBar will be underneath the StatusBar
                The "StatusBarThickness" resource is one which is programmatically added at runtime, with a value that changes depending on the platform/device. -->
        <Setter Property="Padding"
                Value="{StaticResource StatusBarThickness}" />
        <!-- Uncomment when android is fixed -->
        <!--<Setter Property="toolkit:VisibleBoundsPadding.PaddingMask"
                Value="Top" />-->

        <!-- Setting content to empty to avoid getting the datacontext-->
        <Setter Property="Content"
                Value="" />

        <!-- ANDROID SETTERS -->
        <android:Setter Property="toolkit:UIElementExtensions.Elevation"
                        Value="4" />

        <!-- IOS SETTERS -->
        <!-- Remove the back button title (and only leave the back arrow) -->
        <ios:Setter Property="(toolkit:CommandBarExtensions.BackButtonTitle)"
                    Value="" />
        <ios:Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CommandBar">
                    <!-- 
                        Context:
                        On iOS, all pages share the same UINavigationBar instance.
                        During a transition from two pages with different CommandBar colors, the shared UINavigationBar bar instance can only display one of those colors.
                    
                        Example:
                        Page A has an opaque CommandBar and Page B has a transparent CommandBar.
                        When transitioning from Page A to Page B, the shared UINavigationBar instance becomes transparent, which reveals a white space at the top of Page A.
                    
                        Solution:
                        To circumvent this issue, we duplicate the background color of the UINavigationBar with this Border.
                        Note that this only works because we're not using semi-transparent background colors (which would add up and look off). 
                    -->
                    <Border BorderBrush="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}">
                        <NativeCommandBarPresenter Height="44" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </ios:Setter>

        <!-- WINDOWS SETTERS -->
        <win:Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Center"
                               FontWeight="Bold"
                               Margin="12,0" />
                </DataTemplate>
            </Setter.Value>
        </win:Setter>

        <win:Setter Property="Height"
                    Value="40"/>

        <!-- Simplified CommandBar template that adds support for Uno.UI.CommandBarExtensions.NavigationCommand on Windows. -->
        <win:Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CommandBar">
                    <Grid x:Name="LayoutRoot"
                          Height="{TemplateBinding Height}"
                          Background="{TemplateBinding Background}">
                        <Grid x:Name="ContentRoot"
                              VerticalAlignment="Top"
                              Margin="{TemplateBinding Padding}"
                              Height="{TemplateBinding Height}"
                              Background="{TemplateBinding Background}"
                              Opacity="{TemplateBinding Opacity}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentControl x:Name="NavigationCommand"
                                            Grid.Column="0"
                                            IsTabStop="False"
                                            Foreground="{TemplateBinding Foreground}"
                                            Content="{Binding (toolkit:CommandBarExtensions.NavigationCommand), RelativeSource={RelativeSource TemplatedParent}}" />
                            <!-- Use a ContentControl rather than a ContentPresenter so that IsEnabled can be set to false
                                 in the Minimal/HiddenClosed states to remove it from being a tab-stop candidate. -->
                            <ContentControl x:Name="ContentControl"
                                            Grid.Column="1"
                                            HorizontalContentAlignment="Stretch"
                                            VerticalContentAlignment="Stretch"
                                            HorizontalAlignment="Stretch"
                                            VerticalAlignment="Stretch"
                                            Content="{TemplateBinding Content}"
                                            ContentTemplate="{TemplateBinding ContentTemplate}"
                                            Foreground="{TemplateBinding Foreground}"
                                            IsTabStop="False" />
                            <ItemsControl x:Name="PrimaryItemsControl"
                                          HorizontalAlignment="Right"
                                          MinHeight="{ThemeResource AppBarThemeMinHeight}"
                                          IsTabStop="False"
                                          Grid.Column="2">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal" />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                            <Rectangle x:Name="HighContrastBorder"
                                       Grid.ColumnSpan="3"
                                       x:DeferLoadStrategy="Lazy"
                                       Visibility="Collapsed"
                                       VerticalAlignment="Stretch"
                                       Stroke="{ThemeResource SystemControlForegroundTransparentBrush}"
                                       StrokeThickness="1" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </win:Setter>
    </Style>

    <!-- Default Style -->
    <Style TargetType="CommandBar"
           BasedOn="{StaticResource DefaultCommandBarStyle}" />

</ResourceDictionary>
