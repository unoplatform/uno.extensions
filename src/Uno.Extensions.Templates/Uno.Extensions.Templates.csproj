<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>netstandard2.0</TargetFramework>
		<IsTool>true</IsTool>
		<IncludeBuildOutput>false</IncludeBuildOutput>
		<PackageType>Template</PackageType>
		<ContentTargetFolders>content</ContentTargetFolders>

		<!-- required for .vsconfig -->
		<NoDefaultExcludes>true</NoDefaultExcludes>

		<!-- Disable package generation for WinUI converted build -->
		<IsPackable Condition="'$(UNO_UWP_BUILD)'=='false'">false</IsPackable>
	</PropertyGroup>

	<PropertyGroup>
		<PackageTags>dotnet-new;templates;uno-platform;uno-extensions</PackageTags>
		<Authors>nventive</Authors>
		<PackageProjectUrl>https://github.com/unoplatform/uno.extensions</PackageProjectUrl>
		<PackageIconUrl>https://nv-assets.azurewebsites.net/logos/uno.png</PackageIconUrl>
		<RepositoryUrl>https://github.com/unoplatform/uno.extensions</RepositoryUrl>
		<Description></Description>
		<Copyright>Copyright (C) 2015-2021 nventive inc. - all rights reserved</Copyright>
		<GeneratePackageOnBuild Condition="'$(Configuration)'=='Release'">true</GeneratePackageOnBuild>
		<PackageTags>dotnet-new;templates;uno-platform;webassembly;ios;android;uwp;winui;uno-extensions</PackageTags>
	</PropertyGroup>

	<ItemGroup>
		<UpToDateCheckInput Include="content\**" />
	</ItemGroup>

	<ItemGroup>
		<Compile Remove="content/**/*.cs" />
		<None Include="content/**/*.cs" />
	</ItemGroup>
	
	<ItemGroup>
		<Content Include="content\unoapp-extensions\**" KeepDuplicates="False">
			<PackagePath>content\unoapp-extensions</PackagePath>
			<Pack>true</Pack>
		</Content>
		<Content Include="content\unoapp-extensions-net6\**" KeepDuplicates="False">
			<PackagePath>content\unoapp-extensions-net6</PackagePath>
			<Pack>true</Pack>
		</Content>
	</ItemGroup>

	<Target Name="ReplaceVersions" BeforeTargets="BeforeBuild" Condition="'$(PackageVersion)'!='255.255.255.255'">
		<ItemGroup>
			<MySourceFiles Include="..\..\samples\Commerce\Commerce.Shared\**\*" />
		</ItemGroup>

		<Copy SourceFiles="@(MySourceFiles)" DestinationFiles="@(MySourceFiles->'content\unoapp-extensions\MyExtensionsApp.Shared\%(RecursiveDir)%(Filename)%(Extension)')" />

		<RenameFiles SourcePath="content\unoapp-extensions\MyExtensionsApp.Shared" SourceName="Commerce" TargetName="MyExtensionsApp" />
		
		<PropertyGroup>
			<MSBuildDeveloperNamespace>
				<Namespace Prefix="x" Uri="http://schemas.microsoft.com/developer/msbuild/2003" />
			</MSBuildDeveloperNamespace>
		</PropertyGroup>

		<ItemGroup>
			<_AllCSProjFiles Include="content/**/*.csproj" />
		</ItemGroup>

		<!-- Legacy projects -->
		<XmlPoke XmlInputPath="%(_AllCSProjFiles.Identity)" Query="//x:PackageReference[@Version='255.255.255.255']/@Version" Value="$(PackageVersion)" Namespaces="$(MSBuildDeveloperNamespace)" />

		<!-- SDK Style projects -->
		<XmlPoke XmlInputPath="%(_AllCSProjFiles.Identity)" Query="//PackageReference[@Version='255.255.255.255']/@Version" Value="$(PackageVersion)" Namespaces="" />

		<XmlPeek XmlInputPath="..\..\samples\Commerce\WinUI\Commerce.Wasm\Commerce.Wasm.csproj" Query="//PackageReference[@Include='Uno.Toolkit.WinUI']/@Version">
			<Output TaskParameter="Result" ItemName="Uno_Toolkit_WinUI_Version" />
		</XmlPeek>
		<XmlPeek XmlInputPath="..\..\samples\Commerce\WinUI\Commerce.Wasm\Commerce.Wasm.csproj" Query="//PackageReference[@Include='Uno.Toolkit.WinUI.Material']/@Version">
			<Output TaskParameter="Result" ItemName="Uno_Toolkit_WinUI_Material_Version" />
		</XmlPeek>
		<XmlPeek XmlInputPath="..\..\samples\Commerce\WinUI\Commerce.Wasm\Commerce.Wasm.csproj" Query="//PackageReference[@Include='Uno.Material.WinUI']/@Version">
			<Output TaskParameter="Result" ItemName="Uno_Material_WinUI_Version" />
		</XmlPeek>

		<!-- Uno_Toolkit_WinUI_Version -->
		<XmlPoke XmlInputPath="%(_AllCSProjFiles.Identity)"
						 Query="//x:PackageReference[@Include='Uno.Toolkit.WinUI']/@Version"
						 Value="@(Uno_Toolkit_WinUI_Version)"
						 Namespaces="$(MSBuildDeveloperNamespace)" />
		<XmlPoke XmlInputPath="%(_AllCSProjFiles.Identity)"
						 Query="//PackageReference[@Include='Uno.Toolkit.WinUI']/@Version"
						 Value="@(Uno_Toolkit_WinUI_Version)"
						 Namespaces="" />

		<!-- Uno_Toolkit_WinUI_Material_Version -->
		<XmlPoke XmlInputPath="%(_AllCSProjFiles.Identity)"
						 Query="//x:PackageReference[@Include='Uno.Toolkit.WinUI.Material']/@Version"
						 Value="@(Uno_Toolkit_WinUI_Material_Version)"
						 Namespaces="$(MSBuildDeveloperNamespace)" />
		<XmlPoke XmlInputPath="%(_AllCSProjFiles.Identity)"
						 Query="//PackageReference[@Include='Uno.Toolkit.WinUI.Material']/@Version"
						 Value="@(Uno_Toolkit_WinUI_Material_Version)"
						 Namespaces="" />

		<!-- Uno_Material_WinUI_Version -->
		<XmlPoke XmlInputPath="%(_AllCSProjFiles.Identity)"
						 Query="//x:PackageReference[@Include='Uno.Material.WinUI']/@Version"
						 Value="@(Uno_Material_WinUI_Version)"
						 Namespaces="$(MSBuildDeveloperNamespace)" />
		<XmlPoke XmlInputPath="%(_AllCSProjFiles.Identity)"
						 Query="//PackageReference[@Include='Uno.Material.WinUI']/@Version"
						 Value="@(Uno_Material_WinUI_Version)"
						 Namespaces="" />

	</Target>

	<UsingTask TaskName="RenameFiles" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<SourcePath ParameterType="System.String" Required="True" Output="False" />
			<SourceName ParameterType="System.String" Required="True" Output="False" />
			<TargetName ParameterType="System.String" Required="True" Output="False" />
		</ParameterGroup>
		<Task>
			<Reference Include="System.Xml" />
			<Using Namespace="System" />
			<Using Namespace="System.Linq" />
			<Using Namespace="System.IO" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
					string[] filters = new[] { "*.cs", "*.xml", "*.xaml", "*.plist", "*.js", "*.config", "*.appxmanifest", "*.projitems", "*.shproj", "*.csproj", "*.sln" };
					foreach (var file in filters.SelectMany(f => Directory.EnumerateFiles(SourcePath, f, SearchOption.AllDirectories)))
					{
						Log.LogMessage("Converting file: " + file);
						var s = File.ReadAllText(file);
						s = s
							.Replace(SourceName, TargetName)
							;
							
						if(Path.GetExtension(file).ToLower() == ".cs" && !s.StartsWith("//-:cnd:noEmit"))
						{
							// Disable conditionals for all imported files
							s = "//-:cnd:noEmit\r\n" + s;
						}

						var fileName = Path.GetFileName(file);
						var filePath = Path.GetDirectoryName(file);
						var updatedFileName = fileName.Replace(SourceName, TargetName);
						
						File.WriteAllText(file, s);
						if(updatedFileName != fileName)
						{
							File.Delete(Path.Combine(filePath, updatedFileName));
							Log.LogMessage("Move file: " + file + " to " + Path.Combine(filePath, updatedFileName));
							File.Move(file, Path.Combine(filePath, updatedFileName));
						}
					}
					Func<string[]> getFolders = () => Directory.GetDirectories(SourcePath, "*.*", SearchOption.AllDirectories);
					var folders = getFolders();
					for (int i = 0; i < folders.Length; i++)
					{
						var dir = folders[i];
						if(!Directory.Exists(dir)) continue;
						var dirName = Path.GetFileName(dir);
						var path = Path.GetDirectoryName(dir);
						var updatedDirName = dirName.Replace(SourceName, TargetName);
						if(updatedDirName != dirName)
						{
							i = 0;
							folders = getFolders();
							var target = Path.Combine(path, updatedDirName);
							Log.LogMessage("Moving: " + dir + " to " + target);
							Directory.Move(dir, target);
						}
					}
				]]>
			</Code>
		</Task>
	</UsingTask>

</Project>
