<Project>

	<PropertyGroup>
		<UsingMicrosoftMauiResizetizerSdk>false</UsingMicrosoftMauiResizetizerSdk>
	</PropertyGroup>

	<ItemGroup Condition=" '$(ImplicitUsings)' == 'true' OR '$(ImplicitUsings)' == 'enable' ">
		<Using Include="Uno.Extensions.Maui" />
		<Using Include="Uno.Extensions.Maui.Platform" />
		<!-- Removes .NET MAUI usings to avoid Ambiguous references -->
		<Using Remove="@(Using->HasMetadata('Sdk')->WithMetadataValue('Sdk', 'Maui'))"/>
	</ItemGroup>

	<Choose>
		<When Condition="$(TargetFramework.Contains('windows10'))">
			<PropertyGroup Condition=" '$(UsingUnoSdk)' != 'true' AND '$(OutputType)' != 'WinExe' AND '$(OutputType)' != 'Exe' ">
				<EnableMsixTooling>false</EnableMsixTooling>
			</PropertyGroup>
		</When>
	</Choose>

	<ItemGroup>
		<Using Remove="Microsoft.Maui.*" />
		<Analyzer Remove="Microsoft.Maui.Controls.SourceGen" />
		<MauiXaml Remove="**\*.xaml" />
		<MauiAsset Remove="@(MauiAsset)" />
		<MauiImage Remove="@(MauiImage)" />
		<MauiIcon Remove="@(MauiIcon)" />
		<MauiFont Remove="@(MauiFont)" />
		<MauiSplashScreen Remove="@(MauiSplashScreen)" />
		<_MauiImplicitPackageReference Remove="Microsoft.Maui.Resizetizer" />
		<PackageReference Remove="Microsoft.Maui.Resizetizer" />
		<!-- <Page Update="**\*.xaml" XamlRuntime="WinUI" Generator="MSBuild:Compile" /> -->
	</ItemGroup>

	<ItemGroup>
		<AvailableItemName Remove="MauiAsset" />
		<AvailableItemName Remove="MauiImage" />
		<AvailableItemName Remove="MauiIcon" />
		<AvailableItemName Remove="MauiFont" />
		<AvailableItemName Remove="MauiSplashScreen" />
	</ItemGroup>

	<Target Name="MauiEmbeddingSanitizeXamlTypeInfo"
			AfterTargets="CoreGenerateAssemblyInfo"
			BeforeTargets="CoreCompile">
		<ReplaceFileText Filename="$(IntermediateOutputPath)XamlTypeInfo.g.cs"
						MatchExpression="that.class"
						ReplacementText="that.@class"
						Condition="Exists('$(IntermediateOutputPath)XamlTypeInfo.g.cs')" />
	</Target>

	<!-- Using Regex Replace prevents XmlPoke from replacing Tabs with Spaces -->
	<UsingTask TaskName="ReplaceFileText" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<Filename ParameterType="System.String" Required="true" />
			<MatchExpression ParameterType="System.String" Required="true" />
			<ReplacementText ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Using Namespace="System" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.Text.RegularExpressions" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
					File.WriteAllText(
						Filename,
						File.ReadAllText(Filename).Replace(MatchExpression, ReplacementText)
						);
				]]>
			</Code>
		</Task>
	</UsingTask>

	<!-- Workaround to avoid including Uno.Toolkit.UI XBFs in the PRI file -->
	<Target Name="AdjustGetPackagingOutput1" AfterTargets="GetMrtPackagingOutputs"
		Condition="$(UsingUnoSdk) != 'true'">
		<Message Importance="high" Text="Applying NuGet packaging workaround for dependent PRI files exclusion" />
		<ItemGroup>
			<_OtherPriFiles Include="@(PackagingOutputs)" Condition="'%(Extension)' == '.pri' and ('%(PackagingOutputs.ReferenceSourceTarget)' == 'ProjectReference' or '%(PackagingOutputs.NugetSourceType)'=='Package')" />
			<PackagingOutputs Remove="@(_OtherPriFiles)" />
		</ItemGroup>
	</Target>
	<Target Name="AdjustGetPackagingOutput2" BeforeTargets="AddPriPayloadFilesToCopyToOutputDirectoryItems"
		Condition="$(UsingUnoSdk) != 'true'">
		<Message Importance="high" Text="Applying NuGet packaging workaround for dependent PRI files exclusion" />
		<ItemGroup>
			<_OtherPriFiles1 Include="@(_ReferenceRelatedPaths)" Condition="'%(Extension)' == '.pri' and ('%(_ReferenceRelatedPaths.ReferenceSourceTarget)' == 'ProjectReference' or '%(_ReferenceRelatedPaths.NugetSourceType)'=='Package')" />
			<_ReferenceRelatedPaths Remove="@(_OtherPriFiles1)" />
			<_OtherPriFiles2 Include="@(ReferenceCopyLocalPaths)" Condition="'%(Extension)' == '.pri' and ('%(ReferenceCopyLocalPaths.ReferenceSourceTarget)' == 'ProjectReference' or '%(ReferenceCopyLocalPaths.NugetSourceType)'=='Package')" />
			<ReferenceCopyLocalPaths Remove="@(_OtherPriFiles2)" />
		</ItemGroup>
	</Target>
</Project>
